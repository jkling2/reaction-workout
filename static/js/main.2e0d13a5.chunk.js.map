{"version":3,"sources":["logo.svg","reaction_type/ReactionTypeEnum.tsx","context/ReactionWorkoutContext.tsx","reaction_type/ReactionTypeNumberAreaDisplay.tsx","reaction_type/ReactionTypeColorAreaDisplay.tsx","reaction_type/ReactionTypeNameAreaDisplay.tsx","reaction_type/ReactionTypeDirectionAreaDisplay.tsx","settings/SettingsPage.tsx","reaction_type/ReactionButton.tsx","reaction_type/TextWorkoutDisplay.tsx","reaction_type/ColorWorkoutDisplay.tsx","reaction_type/DirectionWorkoutDisplay.tsx","workout/WorkoutPage.tsx","ReactionWorkoutApp.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","ReactionType","ReactionKind","ReactionWorkoutContext","React","createContext","type","area","kind","time","repeat","setType","setArea","setKind","setTime","setRepeat","getTypeOrDefault","typeToVerify","getKindOrDefault","kindToVerify","ReactionWorkoutContextProvider","props","history","useHistory","location","useLocation","initialValues","search","searchParams","URLSearchParams","parseInt","get","NUMBER","numberArea","split","colorArea","nameArea","directionArea","reactionWithTime","ON_CLICK","length","getInitialValues","useState","areas","setAreas","useEffect","join","newAreas","set","push","toString","Provider","value","children","NumberAreaModal","useContext","areaValues","setAreaValues","validRange","setValidRange","Modal","show","size","centered","onHide","hide","Header","className","closeButton","Title","id","Body","InputGroup","Prepend","Text","Form","Control","bsPrefix","pattern","placeholder","isInvalid","onChange","event","isNaN","currentTarget","Feedback","Footer","Button","onClick","ColorAreaModal","colors","colorIdxs","Array","fill","map","v","i","indexOf","selectedColors","setSelectedColors","ColorPalette","colorIdxRow","Row","key","colorIdx","role","style","backgroundColor","setSeledctedColor","checked","readOnly","newSelectedColors","filter","NameAreaModal","newValue","setNewValue","NameItem","name","currentName","setCurrentName","aria-label","idx","val","newAreaValues","changeAreaValuesAtIndex","deleteAreaValuesAtIndex","directions","directionIdxs","DirectionAreaModal","selectedDirections","setSelectedDirections","setSelectedDirection","directionIdx","newSelectedDirection","DirectionPalette","directionIdxRow","SettingsPage","validate","setValidate","showNumberAreaModal","setShowNumberAreaModal","showColorAreaModal","setShowColorAreaModal","showNameAreaModal","setShowNameAreaModal","showDirectionAreaModal","setShowDirectionAreaModal","Container","maxWidth","Group","controlId","as","COLOR","NAME","DIRECTION","TIME","tooltip","Append","defaultChecked","Check","label","Label","min","max","ReactionButton","runTimeBasedReaction","setRunTimeBasedReaction","setNeedNewRandomValue","TextWorkoutDisplay","randomValue","reactionButtonProps","useWindowSize","width","height","display","justifyContent","alignItems","fontSize","ColorWorkoutDisplay","defaultBackground","DirectionWorkoutDisplay","areaPool","blink","WorkoutPage","randomValueIdx","setRandomValueIdx","setRandomValue","needNewRandomValue","poolUpdated","setPoolUpdated","done","setDone","setAreaPool","setTimeout","timer","setTimer","startTimer","setStartTimer","unsetRV","Promise","resolve","then","rvIdx","Math","floor","random","clearTimeout","localAreaPool","index","concat","initializeAreaPool","modAreaPool","DoneModal","ReactionWorkoutApp","Navbar","bg","variant","expand","collapseOnSelect","Brand","href","alt","src","logo","Toggle","Collapse","Nav","Item","activeClassName","exact","to","Link","disabled","path","from","Boolean","window","hostname","match","mount","document","getElementById","app","StrictMode","basename","process","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,yHCA/BC,ECIAC,E,iKDJAD,O,mBAAAA,I,iBAAAA,I,eAAAA,I,0BAAAA,M,cCIAC,O,uBAAAA,I,gBAAAA,M,KAKL,IAAMC,EAAyBC,IAAMC,cAAc,CACxDC,KAAM,EACNC,KAAM,CAAC,IAAK,KACZC,KAAM,EACNC,KAAM,EACNC,OAAQ,EACRC,QAAS,SAACL,KACVM,QAAS,SAACL,KACVM,QAAS,SAACL,KACVM,QAAS,SAACL,KACVM,UAAW,SAACL,OAGRM,EAAmB,SAACC,GACxB,OAAOhB,EAAagB,GAAgBA,EAAe,GAG/CC,EAAmB,SAACC,GACxB,OAAOjB,EAAaiB,GAAgBA,EAAe,GAkC9C,IAAMC,EAA2C,SAACC,GACvD,IAAMC,EAAUC,cACVC,EAAWC,cAEXC,EAnCR,SACEC,GAEA,IAAMC,EAAe,IAAIC,gBAAgBF,GAEnCrB,EACJU,EAAiBc,SAASF,EAAaG,IAAI,SAAW,OACtD9B,EAAa+B,OACTC,EAAiC,IAAT3B,IAC3BsB,EAAaG,IAAI,SAAW,OAAOG,MAAM,MAAS,CAAC,IAAK,KACrDC,EAAgC,IAAT7B,IAC1BsB,EAAaG,IAAI,SAAW,YAAYG,MAAM,MAAS,CAAC,OAAQ,OAC7DE,EAA+B,IAAT9B,IACzBsB,EAAaG,IAAI,SAAW,cAAcG,MAAM,MAAS,CAAC,OAAQ,SAC/DG,EAAoC,IAAT/B,IAC9BsB,EAAaG,IAAI,SAAW,iBAAOG,MAAM,MAAS,CAAC,SAAK,UACrDI,GAAoBV,EAAaG,IAAI,SAAW,KAAKG,MAAM,KAMjE,MAAO,CACL5B,EACA,CAAC2B,EAAYE,EAAWC,EAAUC,GANlCnB,EAAiBY,SAASQ,EAAiB,MAAQpC,EAAaqC,SAEhET,SAASQ,EAAiBE,OAAS,EAAIF,EAAiB,GAAK,MAAQ,EAChDR,SAASF,EAAaG,IAAI,WAAa,MAe5DU,CAAiBjB,EAASG,QAE5B,EAAwBe,mBAAiBhB,EAAc,IAAvD,mBAAOpB,EAAP,KAAaK,EAAb,KACA,EAA0B+B,mBAAqBhB,EAAc,IAA7D,mBAAOiB,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAmBC,EAAMrC,IAAjD,mBAAOC,EAAP,KAAaK,EAAb,KACA,EAAwB8B,mBAAiBhB,EAAc,IAAvD,mBAAOlB,EAAP,KAAaK,EAAb,KACA,EAAwB6B,mBAAiBhB,EAAc,IAAvD,mBAAOjB,EAAP,KAAaK,EAAb,KACA,EAA4B4B,mBAAiBhB,EAAc,IAA3D,mBAAOhB,EAAP,KAAeK,EAAf,KA2BA,OAzBA8B,qBAAU,WACR,IAAMjB,EAAe,IAAIC,gBAAgBL,EAASG,QAElD,GAAIpB,EAAKuC,KAAK,QAAUlB,EAAaG,IAAI,SAAW,OAAQ,CAC1D,IAAMgB,EAAQ,YAAOJ,GACrBI,EAAS/B,EAAiBV,IAASC,EACnCqC,EAASG,GAEPzC,IAASU,EAAiBc,SAASF,EAAaG,IAAI,SAAW,OACjEnB,EAAQ+B,EAAMrC,IAGhBsB,EAAaoB,IAAI,OAAjB,UAA4BhC,EAAiBV,KAC7CsB,EAAaoB,IAAI,OAAjB,UAA4BzC,EAAKuC,KAAK,OACtClB,EAAaoB,IACX,OAC2B,IAA3B9B,EAAiBV,GAAjB,UACOU,EAAiBV,IADxB,UAEOA,EAFP,YAEeC,IAEjBmB,EAAaoB,IAAI,SAAjB,UAA8BtC,IAE9BY,EAAQ2B,KAAR,WAAiBrB,EAAasB,eAC7B,CAAC5C,EAAMC,EAAMoC,EAAOnC,EAAMC,EAAMC,EAAQY,EAASE,EAASG,SAG3D,kBAACxB,EAAuBgD,SAAxB,CACEC,MAAO,CACL9C,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACTC,QAASA,EACTC,QAASA,EACTC,QAASA,EACTC,UAAWA,IAGZM,EAAMgC,W,QCpBEC,EA3FwD,SACrEjC,GAEA,MAA0BkC,qBAAWpD,GAA7BI,EAAR,EAAQA,KAAMK,EAAd,EAAcA,QAEd,EAAoC8B,mBAAS,YAAInC,IAAjD,mBAAOiD,EAAP,KAAmBC,EAAnB,KACA,EAAoCf,mBAClCZ,SAAS0B,EAAW,KAAO1B,SAAS0B,EAAW,KADjD,mBAAOE,EAAP,KAAmBC,EAAnB,KAIA,OACE,kBAACC,EAAA,EAAD,CAAOC,KAAMxC,EAAMwC,KAAMC,KAAK,KAAKC,UAAQ,EAACC,OAAQ3C,EAAM4C,MACxD,kBAACL,EAAA,EAAMM,OAAP,CAAcC,UAAU,gBAAgBC,aAAW,GACjD,kBAACR,EAAA,EAAMS,MAAP,CAAaC,GAAG,iCAAhB,sBAIF,kBAACV,EAAA,EAAMW,KAAP,CAAYJ,UAAU,iBACpB,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,aAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,4BACTvE,KAAK,OACLwE,QAAQ,SACRC,YAAY,iBACZC,WAAYtB,EACZN,MAAOtB,SAAS0B,EAAW,IAAM,EAAI,GAAK1B,SAAS0B,EAAW,IAC9DyB,SAAU,SAACC,GAEPC,MAAMrD,SAASoD,EAAME,cAAchC,SACE,IAArC8B,EAAME,cAAchC,MAAMZ,OAE1BiB,EAAc,CAAC,KAAMD,EAAW,KAEhCC,EAAc,CACZ3B,SAASoD,EAAME,cAAchC,OAAOF,WACpCM,EAAW,QAKnB,kBAACmB,EAAA,EAAKC,QAAQS,SAAd,CAAuB/E,KAAK,WAA5B,oEAIF,kBAACkE,EAAA,EAAD,CAAYL,UAAU,QACpB,kBAACK,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,aAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,4BACTvE,KAAK,OACLwE,QAAQ,SACRC,YAAY,iBACZC,WAAYtB,EACZN,MAAOtB,SAAS0B,EAAW,IAAM,EAAI,GAAK1B,SAAS0B,EAAW,IAC9DyB,SAAU,SAACC,GAEPC,MAAMrD,SAASoD,EAAME,cAAchC,SACE,IAArC8B,EAAME,cAAchC,MAAMZ,OAE1BiB,EAAc,CAACD,EAAW,GAAI,OAE9BC,EAAc,CAACD,EAAW,GAAI0B,EAAME,cAAchC,WAIxD,kBAACuB,EAAA,EAAKC,QAAQS,SAAd,CAAuB/E,KAAK,cAGhC,kBAACsD,EAAA,EAAM0B,OAAP,CAAcnB,UAAU,iBACtB,kBAACoB,EAAA,EAAD,CACEjB,GAAG,YACHkB,QAAS,WACH1D,SAAS0B,EAAW,IAAM1B,SAAS0B,EAAW,IAChDG,GAAc,IAEd/C,EAAQ4C,GACRnC,EAAM4C,UAPZ,WCeOwB,EAxFuD,SAACpE,GACrE,MAA0BkC,qBAAWpD,GAA7BI,EAAR,EAAQA,KAAMK,EAAd,EAAcA,QAER8E,EAAmB,CACvB,MACA,OACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,OACA,QACA,SAGIC,EAAwB,CAC5B,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,GAAI,KAGb,EAA4CjD,mBAC1CkD,MAAMF,EAAOlD,QACVqD,MAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OAAUzF,EAAK0F,QAAQP,EAAOM,KAAO,MAH9C,mBAAOE,EAAP,KAAuBC,EAAvB,KAYMC,EAA0D,SAAC/E,GAC/D,OACE,oCACGsE,EAAUG,KAAI,SAACO,EAAaL,GAAd,OACb,kBAACM,EAAA,EAAD,CAAKnC,UAAU,yBAAyBoC,IAAKP,GAC1CK,EAAYP,KAAI,SAACU,GAAD,OACf,0BACED,IAAKC,EACLC,KAAK,SACLnC,GAAG,eACHH,UAAU,iBACVuC,MAAO,CAAEC,gBAAiBjB,EAAOc,IACjChB,QAAS,kBAAMnE,EAAMuF,kBAAkBJ,KAEvC,2BACElC,GAAG,qBACHhE,KAAK,WACLiG,IAAKC,EAAS,QACdK,QAASX,EAAeM,GACxBM,UAAQ,cAUxB,OACE,kBAAClD,EAAA,EAAD,CAAOC,KAAMxC,EAAMwC,KAAMC,KAAK,KAAKC,UAAQ,EAACC,OAAQ3C,EAAM4C,MACxD,kBAACL,EAAA,EAAMM,OAAP,CAAcC,UAAU,gBAAgBC,aAAW,GACjD,kBAACR,EAAA,EAAMS,MAAP,CAAaC,GAAG,iCAAhB,WAEF,kBAACV,EAAA,EAAMW,KAAP,CAAYJ,UAAU,iBACpB,kBAACiC,EAAD,CAAcQ,kBAzCM,SAACJ,GACzB,IAAMO,EAAiB,YAAOb,GAC9Ba,EAAkBP,IAAaO,EAAkBP,GACjDL,EAAkBY,OAwChB,kBAACnD,EAAA,EAAM0B,OAAP,CAAcnB,UAAU,iBACtB,kBAACoB,EAAA,EAAD,CACEjB,GAAG,YACHkB,QAAS,WACP5E,EAAQ8E,EAAOsB,QAAO,SAACjB,EAAGC,GAAJ,OAAUE,EAAeF,OAC/C3E,EAAM4C,SAJV,WCYSgD,EAtFoD,SAAA5F,GACjE,MAGMkC,qBAAWpD,GAFbI,EADJ,EACIA,KACAK,EAFJ,EAEIA,QAGJ,EAAoC8B,mBAAS,YAAInC,IAAjD,mBAAOiD,EAAP,KAAmBC,EAAnB,KACA,EAAgCf,mBAAS,IAAzC,mBAAOwE,EAAP,KAAiBC,EAAjB,KAaMC,EAAkD,SAAA/F,GACtD,MAAsCqB,mBAASrB,EAAMgG,MAArD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,OACE,kBAAC/C,EAAA,EAAD,KACF,kBAACG,EAAA,EAAKC,QAAN,CACMC,SAAS,4BACTvE,KAAK,OACLyE,YAAY,WACZ3B,MAAOkE,EACPrC,SAAU,SAACC,GAAD,OAAiDqC,EAAerC,EAAME,cAAchC,UAEhG,kBAACoB,EAAA,EAAWC,QAAZ,KACA,0BAAMgC,KAAK,SAASe,aAAW,YAAYhC,QAAS,kBAvB1B,SAACiC,EAAaC,GAC5C,IAAMC,EAAa,YAAOnE,GAC1BmE,EAAcF,GAAOC,EACrBjE,EAAckE,GAoBgDC,CAAwBvG,EAAMoG,IAAKH,KAA7F,UACA,0BAAMb,KAAK,SAASe,aAAW,SAAShC,QAAS,kBAlBvB,SAACiC,GAC/B,IAAME,EAAgB,YAAInE,GAAYwD,QAAO,SAACjB,EAAGC,GAAJ,OAAUA,IAAMyB,KAC7DhE,EAAckE,GAgB6CE,CAAwBxG,EAAMoG,OAArF,aAKN,OACE,kBAAC7D,EAAA,EAAD,CACEC,KAAMxC,EAAMwC,KACZC,KAAK,KACLC,UAAQ,EACRC,OAAQ3C,EAAM4C,MAEd,kBAACL,EAAA,EAAMM,OAAP,CAAcC,UAAU,gBAAgBC,aAAW,GACjD,kBAACR,EAAA,EAAMS,MAAP,CAAaC,GAAG,iCAAhB,UAIF,kBAACV,EAAA,EAAMW,KAAP,CAAYJ,UAAU,iBACnBX,EAAWsC,KAAI,SAACuB,EAAMrB,GAAP,OAAa,kBAACoB,EAAD,CAAUC,KAAMA,EAAMI,IAAKzB,EAAGO,IAAKP,OAEhE,kBAACxB,EAAA,EAAD,CAAYL,UAAU,QACpB,kBAACQ,EAAA,EAAKC,QAAN,CACEC,SAAS,4BACTvE,KAAK,OACLyE,YAAY,WACZ3B,MAAO8D,EACPjC,SAAU,SAACC,GAAD,OAAiDiC,EAAYjC,EAAME,cAAchC,UAE7F,kBAACoB,EAAA,EAAWC,QAAZ,CAAoBe,QAAS,WACV,KAAb0B,IACFzD,EAAc,GAAD,mBAAKD,GAAL,CAAiB0D,KAC9BC,EAAY,OAGhB,0BAAMV,KAAK,SAASe,aAAW,aAA/B,aAIJ,kBAAC5D,EAAA,EAAM0B,OAAP,CAAcnB,UAAU,iBACtB,kBAACoB,EAAA,EAAD,CACEjB,GAAG,YACHkB,QAAS,WACD5E,EAAQ4C,GACRnC,EAAM4C,SAJhB,WCxEG6D,EAAuB,CAClC,eACA,GACA,eACA,GACA,eACA,GACA,SACA,SACA,SACA,GACA,SACA,SACA,GACA,SACA,SACA,GACA,SACA,SACA,SACA,GACA,eACA,GACA,eACA,GACA,gBAGWC,EAA4B,CACvC,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,KAwEJC,EArE2D,SACxE3G,GAEA,MAA0BkC,qBAAWpD,GAA7BI,EAAR,EAAQA,KAAMK,EAAd,EAAcA,QACd,EAAoD8B,mBAClDkD,MAAMkC,EAAWtF,QACdqD,MAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OAAUzF,EAAK0F,QAAQ6B,EAAW9B,KAAO,MAHlD,mBAAOiC,EAAP,KAA2BC,EAA3B,KAMMC,EAAuB,SAACC,GAC5B,GAAiC,KAA7BN,EAAWM,GAAsB,CACnC,IAAMC,EAAoB,YAAOJ,GACjCI,EAAqBD,IAAiBC,EAAqBD,GAC3DF,EAAsBG,KAIpBC,EAAiE,SACrEjH,GAEA,OACE,oCACG0G,EAAcjC,KAAI,SAACyC,EAAiBvC,GAAlB,OACjB,kBAACM,EAAA,EAAD,CAAKnC,UAAU,yBAAyBoC,IAAKP,GAC1CuC,EAAgBzC,KAAI,SAACsC,GAAD,OACnB,0BACE7B,IAAK6B,EACL3B,KAAmC,KAA7BqB,EAAWM,GAAuB,SAAW,OACnD9D,GACE2D,EAAmBG,GACf,0BACA,iBAENjE,UAAU,2DACVqB,QAAS,kBAAM2C,EAAqBC,KAEnCN,EAAWM,aAS1B,OACE,kBAACxE,EAAA,EAAD,CAAOC,KAAMxC,EAAMwC,KAAMC,KAAK,KAAKC,UAAQ,EAACC,OAAQ3C,EAAM4C,MACxD,kBAACL,EAAA,EAAMM,OAAP,CAAcC,UAAU,gBAAgBC,aAAW,GACjD,kBAACR,EAAA,EAAMS,MAAP,CAAaC,GAAG,iCAAhB,eAEF,kBAACV,EAAA,EAAMW,KAAP,CAAYJ,UAAU,iBACpB,kBAACmE,EAAD,CAAkBH,qBAAsBA,KAE1C,kBAACvE,EAAA,EAAM0B,OAAP,CAAcnB,UAAU,iBACtB,kBAACoB,EAAA,EAAD,CACEjB,GAAG,YACHkB,QAAS,WACP5E,EAAQkH,EAAWd,QAAO,SAACjB,EAAGC,GAAJ,OAAUiC,EAAmBjC,OACvD3E,EAAM4C,SAJV,WCgIOuE,EAlNgB,WAC7B,MAUIjF,qBAAWpD,GATbG,EADF,EACEA,KACAC,EAFF,EAEEA,KACAC,EAHF,EAGEA,KACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,OACAC,EANF,EAMEA,QACAE,EAPF,EAOEA,QACAC,EARF,EAQEA,QACAC,EATF,EASEA,UAGIO,EAAUC,cAEhB,EAAgCmB,oBAAS,GAAzC,mBAAO+F,EAAP,KAAiBC,EAAjB,KAEA,EAAsDhG,oBAAS,GAA/D,mBAAOiG,EAAP,KAA4BC,EAA5B,KACA,EAAoDlG,oBAAS,GAA7D,mBAAOmG,EAAP,KAA2BC,EAA3B,KACA,EAAkDpG,oBAAS,GAA3D,mBAAOqG,EAAP,KAA0BC,EAA1B,KACA,EAA4DtG,oBAAS,GAArE,mBAAOuG,EAAP,KAA+BC,EAA/B,KAqBA,OACE,kBAACC,EAAA,EAAD,CAAWzC,MAAO,CAAE0C,SAAU,UAC3BT,GACC,kBAAC,EAAD,CACE9E,KAAM8E,EACN1E,KAAM,kBAAM2E,GAAuB,MAGtCC,GACC,kBAAC,EAAD,CACEhF,KAAMgF,EACN5E,KAAM,kBAAM6E,GAAsB,MAGrCC,GACC,kBAAC,EAAD,CACElF,KAAMkF,EACN9E,KAAM,kBAAM+E,GAAqB,MAGpCC,GACC,kBAAC,EAAD,CACEpF,KAAMoF,EACNhF,KAAM,kBAAMiF,GAA0B,MAG1C,kBAACvE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAK0E,MAAN,CAAYC,UAAU,WAAWnF,UAAU,kBACzC,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,cAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,uBACT0E,GAAG,SACHnG,MAAO9C,EACP2E,SAAU,SAACC,GAAD,OACRvE,EAAQmB,SAASoD,EAAME,cAAchC,UAGvC,4BAAQA,MAAO,GAAf,WACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,SACA,4BAAQA,MAAO,GAAf,iBAKN,kBAACuB,EAAA,EAAK0E,MAAN,CAAYC,UAAU,WAAWnF,UAAU,kBACzC,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,cAEF,kBAACa,EAAA,EAAD,CAAQV,SAAS,uBAAuBW,QAxEhC,WAChB,OAAQlF,GACN,KAAKL,EAAa+B,OAChB4G,GAAuB,GACvB,MACF,KAAK3I,EAAauJ,MAChBV,GAAsB,GACtB,MACF,KAAK7I,EAAawJ,KAChBT,GAAqB,GACrB,MACF,KAAK/I,EAAayJ,UAChBR,GAA0B,MA6DH,IAAhB3I,EAAKiC,OAAe,kBAAoBjC,EAAKuC,KAAK,SAIzD,kBAAC6B,EAAA,EAAK0E,MAAN,CAAYC,UAAU,WAAWnF,UAAU,kBACzC,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,cAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,uBACT0E,GAAG,SACHnG,MAAO5C,EACPyE,SAAU,SAACC,GAAD,OACRrE,EAAQiB,SAASoD,EAAME,cAAchC,UAGvC,4BAAQA,MAAO,GAAf,YACA,4BAAQA,MAAO,GAAf,WAIL5C,IAASN,EAAayJ,MACrB,kBAAChF,EAAA,EAAK0E,MAAN,CAAYC,UAAU,WAAWnF,UAAU,kBACzC,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,cAEF,kBAACC,EAAA,EAAKC,QAAN,CACEC,SAAS,uBACTvE,KAAK,OACLwE,QAAQ,SACRC,YAAY,mBACZ3B,MAAO3C,GAAQ,EAAI,GAAKA,EACxBuE,UAAWyD,GAAYhI,GAAQ,EAC/BwE,SAAU,SAACC,GAEPC,MAAMrD,SAASoD,EAAME,cAAchC,SACE,IAArC8B,EAAME,cAAchC,MAAMZ,OAE1B1B,EAAQ,GAERA,EAAQgB,SAASoD,EAAME,cAAchC,WAI3C,kBAACuB,EAAA,EAAKC,QAAQS,SAAd,CAAuB/E,KAAK,UAAUsJ,SAAO,GAA7C,iCACgC,gCADhC,SAGA,kBAACpF,EAAA,EAAWqF,OAAZ,KACE,kBAACrF,EAAA,EAAWE,KAAZ,eAKPpE,IAASL,EAAa+B,QACrB,kBAAC2C,EAAA,EAAK0E,MAAN,CACEC,UAAU,oBACVnF,UAAU,sBACV2F,eAA2B,IAAXpJ,GAEhB,kBAACiE,EAAA,EAAKoF,MAAN,CACEzJ,KAAK,WACL0J,MAAM,kBACNnD,QAAoB,IAAXnG,EACTuE,SAAU,SAACC,GACTnE,EAAUmE,EAAME,cAAcyB,QAAU,EAAI,OAKnDvG,IAASL,EAAa+B,QACrB,kBAAC2C,EAAA,EAAK0E,MAAN,CACEE,GAAIjD,IACJgD,UAAU,oBACVnF,UAAU,aAEV,kBAACQ,EAAA,EAAKsF,MAAN,CAAY9F,UAAU,QAAtB,UACA,kBAACQ,EAAA,EAAKC,QAAN,CACET,UAAU,YACVU,SAAS,0CACTvE,KAAK,SACLwE,QAAQ,SACRoF,IAAI,IACJC,IAAI,KACJ/G,MAAkB,IAAX1C,EAAe,GAAKA,EAC3BuE,SAAU,SAACC,GACTnE,EAAUe,SAASoD,EAAME,cAAchC,WAG3C,kBAACuB,EAAA,EAAKsF,MAAN,CAAY9F,UAAU,QACR,IAAXzD,EAAe,aAA0B,IAAXA,EAAe,OAAS,UAI7D,kBAACiE,EAAA,EAAK2B,IAAN,CAAUnC,UAAU,0BAClB,kBAACoB,EAAA,EAAD,CACEjB,GAAG,YACHhE,KAAK,SACLkF,QAAS,WACM,IAAThF,GAAcC,EAAO,EACvBa,EAAQ2B,KAAK,WAAa3B,EAAQE,SAASG,QAE3C+G,GAAY,KAPlB,c,iBCrKO0B,EA7BqC,SAAA/I,GAClD,IAAQb,EAAS+C,qBAAWpD,GAApBK,KACA6J,EAAyEhJ,EAAzEgJ,qBAAsBC,EAAmDjJ,EAAnDiJ,wBAAyBC,EAA0BlJ,EAA1BkJ,sBACvD,OACE,oCACG/J,IAASN,EAAayJ,MACrB,kBAACpE,EAAA,EAAD,CACEjB,GAAG,YACHH,UAAU,6BACVqB,QAAS,WACP8E,GAAyBD,KAG1BA,EAAuB,OAAS,SAGpC7J,IAASN,EAAaqC,UACrB,kBAACgD,EAAA,EAAD,CACEjB,GAAG,YACHH,UAAU,6BACVqB,QAAS,kBAAM+E,GAAsB,KAHvC,WC2BKC,EA5C+C,SAACnJ,GAC7D,IACEoJ,EAEEpJ,EAFFoJ,YACAC,EACErJ,EADFqJ,oBAGAL,EAGEK,EAHFL,qBACAC,EAEEI,EAFFJ,wBACAC,EACEG,EADFH,sBAEF,EAA0BI,MAAlBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAEf,OACE,oCACE,kBAAC1B,EAAA,EAAD,CACEzC,MAAO,CACLkE,MAAOA,EACPC,OAAQA,EAAS,EACjBC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,SAGXR,GAEH,kBAACtB,EAAA,EAAD,CACEzC,MAAO,CACLkE,MAAOA,EACPC,OAAQA,EAAS,EAAI,GACrBC,QAAS,OACTC,eAAgB,WAGlB,kBAAC,EAAD,CACEV,qBAAsBA,EACtBC,wBAAyBA,EACzBC,sBAAuBA,OCOlBW,EA3CiD,SAAC7J,GAC/D,IACEoJ,EAGEpJ,EAHFoJ,YACAU,EAEE9J,EAFF8J,kBACAT,EACErJ,EADFqJ,oBAGAL,EAGEK,EAHFL,qBACAC,EAEEI,EAFFJ,wBACAC,EACEG,EADFH,sBAEF,EAA0BI,MAAlBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAEf,OACE,oCACE,kBAAC1B,EAAA,EAAD,CACEzC,MAAO,CACLkE,MAAOA,EACPC,OAAQA,EAAS,EACjBC,QAAS,OACTC,eAAgB,SAChBpE,gBAAiB8D,KAGrB,kBAACtB,EAAA,EAAD,CACEzC,MAAO,CACLkE,MAAOA,EACPC,OAAQA,EAAS,EAAI,GACrBC,QAAS,OACTC,eAAgB,SAChBpE,gBAAiC,KAAhB8D,EAAqBU,EAAoBV,IAG5D,kBAAC,EAAD,CACEJ,qBAAsBA,EACtBC,wBAAyBA,EACzBC,sBAAuBA,OCmClBa,EAlEyD,SACtE/J,GAEA,IAAQoJ,EAA+CpJ,EAA/CoJ,YAAaY,EAAkChK,EAAlCgK,SAAUX,EAAwBrJ,EAAxBqJ,oBAE7BL,EAGEK,EAHFL,qBACAC,EAEEI,EAFFJ,wBACAC,EACEG,EADFH,sBAEF,EAA0BI,MAAlBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,EAAuBtH,qBAAWpD,GAA1BI,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAER8K,EAAQ,SAAClD,GACb,MAAoB,KAAhBqC,MAEOjK,IAASN,EAAayJ,OAASU,IAE/BvC,EAAWM,KAAkBqC,IAM1C,OACE,kBAACtB,EAAA,EAAD,CACEzC,MAAO,CACLkE,MAAOA,EACPxB,SAAU,QACVyB,OAAQA,EAAS,KAGlB9C,EAAcjC,KAAI,SAACyC,EAAiBvC,GAAlB,OACjB,kBAACM,EAAA,EAAD,CAAKnC,UAAU,yBAAyBoC,IAAKP,GAC1CuC,EAAgBzC,KAAI,SAACsC,GAAD,OACnB,0BACE7B,IAAK6B,EACL9D,GACG+G,EAASpF,QAAQ6B,EAAWM,KAAkB,GAAO7H,EAAK0F,QAAQ6B,EAAWM,KAAkB,GAAKkD,EAAMlD,GACzG,0BACD,iBAGHjE,UACmB,KAAjBiE,EACI,uCACAkD,EAAMlD,GACN,sDACA,uCAGY,KAAjBA,GACC,kBAAC,EAAD,CACEiC,qBAAsBA,EACtBC,wBAAyBA,EACzBC,sBAAuBA,IAG1BzC,EAAWM,aCiHXmD,EAlLe,WAC5B,MAAqChI,qBAAWpD,GAAxCG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAME,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,OAC1B,EAA4CgC,oBAAkB,GAA9D,mBAAO8I,EAAP,KAAuBC,EAAvB,KACA,EAAsC/I,mBAAiB,IAAvD,mBAAO+H,EAAP,KAAoBiB,EAApB,KACA,EAAoDhJ,oBAAkB,GAAtE,mBAAOiJ,EAAP,KAA2BpB,EAA3B,KACA,EAAsC7H,oBAAkB,GAAxD,mBAAOkJ,EAAP,KAAoBC,EAApB,KACA,EAAwDnJ,oBACtD,GADF,mBAAO2H,EAAP,KAA6BC,EAA7B,KAGA,EAAwB5H,oBAAkB,GAA1C,mBAAOoJ,EAAP,KAAaC,EAAb,KACA,EAAgCrJ,mBAAmB,IAAnD,mBAAO2I,EAAP,KAAiBW,EAAjB,KAEA,EAA0BtJ,mBAASuJ,YAAW,cAAU,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCzJ,oBAAkB,GAAtD,mBAAO0J,EAAP,KAAmBC,EAAnB,KACMC,EAAU,WACdb,GAAmB,GACnBC,EAAe,KAMjB7I,qBAAU,WACJ8I,GAAsBN,EAAS7I,OAAS,GAC1C+H,GAAsB,GACtBgC,QAAQC,QAAQF,KAAWG,MAAK,kBAC9BR,YAAW,WACT,IAAMS,EAAQC,KAAKC,MAAMD,KAAKE,SAAWxB,EAAS7I,QAClDiJ,EAAkBiB,GAClBhB,EAAeL,EAASqB,IACxBb,GAAe,KACd,SAEIF,GAA0C,IAApBN,EAAS7I,SACxC+H,GAAsB,GACtBD,GAAwB,GACxByB,GAAQ,MAET,CAACJ,EAAoBN,IAExBxI,qBAAU,WAENwJ,GADsB,IAApBb,KAKH,CAACA,IAKJ3I,qBAAU,WACJuJ,GAAc/B,GAChB8B,EACEF,YAAW,WACT1B,GAAsB,KACd,IAAP9J,MAGN,CAAC2L,EAAY3L,EAAM4J,IAKtBxH,qBAAU,WACJwH,GACFE,GAAsB,KAEvB,CAACF,IAKJxH,qBAAU,WACHwH,IACHyC,aAAaZ,GACbG,GAAc,MAEf,CAAChC,EAAsB6B,IAK1BrJ,qBAAU,WAkBJiJ,EACFQ,IAEAN,EApByB,WACzB,OAAQ1L,GACN,KAAKL,EAAa+B,OAChB,IAAMkI,EAAMpI,SAASvB,EAAK,IACpB4J,EAAMrI,SAASvB,EAAK,IAE1B,OAAOqF,MADOuE,EAAMD,EAAM,GAEvBrE,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,gBAAaA,EAAIkE,MAC1B,QAEE,IADA,IAAI6C,EAAa,YAAOxM,GACfyM,EAAQ,EAAGA,EAAQtM,EAAQsM,IAClCD,EAAgBA,EAAcE,OAAd,YAAyB1M,IAE3C,OAAOwM,GAMCG,MAEb,CAACpB,EAAMxL,EAAMC,EAAMG,IAKtBmC,qBAAU,WACO,IAAXnC,IAAiBkL,GAAeJ,GAAkB,GACpDe,QAAQC,QAAQX,GAAe,IAAOY,MAAK,kBACzCR,YAAW,WACT,IAAMkB,EAAc9B,EAASrE,QAAO,SAACjB,EAAGC,GAAJ,OAAUA,IAAMwF,KACpDQ,EAAYmB,KACX,UAGN,CAAC3B,EAAgBH,EAAU3K,EAAQkL,IAEtC,IAAMwB,EAAsB,WAC1B,OACE,kBAACxJ,EAAA,EAAD,CACEC,KAAMiI,EACNhI,KAAK,KACLC,UAAQ,EACRC,OAAQ,WACN+H,GAAQ,KAGV,kBAACnI,EAAA,EAAMM,OAAP,CAAcC,UAAU,gBAAgBC,aAAW,GACjD,kBAACR,EAAA,EAAMS,MAAP,CAAaC,GAAG,iCAAhB,WAMR,OACE,oCACE,kBAAC8I,EAAD,OACE9M,IAASL,EAAa+B,QAAU1B,IAASL,EAAawJ,OACtD,kBAAC,EAAD,CACEgB,YAAaA,EACbC,oBAAqB,CACnBL,uBACAC,0BACAC,2BAILjK,IAASL,EAAauJ,OACrB,kBAAC,EAAD,CACEiB,YAAaA,EACbU,kBAhJ0B,QAiJ1BT,oBAAqB,CACnBL,uBACAC,0BACAC,2BAILjK,IAASL,EAAayJ,WACrB,kBAAC,EAAD,CACEe,YAAaA,EACbY,SAAUA,EACVX,oBAAqB,CACnBL,uBACAC,0BACAC,6BCvGG8C,MA9Df,WACE,MAAuB9J,qBAAWpD,GAA1BK,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACd,OACE,oCACE,gCACE,kBAAC6M,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,OAAOC,OAAO,KAAKC,kBAAgB,GACzD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SACjB,yBACEC,IAAI,GACJC,IAAKC,IACLnD,MAAM,KACNC,OAAO,KACP1G,UAAU,uCANd,2BAUA,kBAACmJ,EAAA,EAAOU,OAAR,MACA,kBAACV,EAAA,EAAOW,SAAR,CAAiB9J,UAAU,uBACzB,kBAAC+J,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,KACE,kBAAC,gBAAD,CACEC,gBAAgB,SAChBC,OAAO,EACPC,GAAG,aAEH,kBAACJ,EAAA,EAAIK,KAAL,KAAW,cAGf,kBAACL,EAAA,EAAIC,KAAL,KACE,kBAAC,gBAAD,CACEC,gBAAgB,SAChBC,OAAO,EACPC,GAAG,YAEF9N,IAASN,EAAayJ,MAAiB,IAATlJ,EAC7B,kBAACyN,EAAA,EAAIK,KAAL,CAAUC,UAAQ,GAAE,WAEpB,kBAACN,EAAA,EAAIK,KAAL,KAAW,iBAQzB,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,YAAYJ,OAAO,GAC7B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOI,KAAK,WAAWJ,OAAO,GAC5B,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUK,KAAK,IAAIJ,GAAG,mBCvDdK,QACW,cAA7BC,OAAOpN,SAASqN,UAEe,UAA7BD,OAAOpN,SAASqN,UAEhBD,OAAOpN,SAASqN,SAASC,MACvB,2D,YCRAC,G,YAAQC,SAASC,eAAe,SAEhCC,EACJ,kBAAC,IAAMC,WAAP,KACE,kBAAC,gBAAD,CAAeC,SAAUC,qBACvB,kBAAC,EAAD,KACE,kBAAC,EAAD,SAMRC,IAASC,OAAOL,EAAKH,GD6Gf,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e0d13a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.28a6ec53.svg\";","export enum ReactionType {\r\n    NUMBER,\r\n    COLOR,\r\n    NAME,\r\n    DIRECTION,\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { ReactionType } from \"../reaction_type/ReactionTypeEnum\";\r\n\r\nexport enum ReactionKind {\r\n  ON_CLICK,\r\n  TIME,\r\n}\r\n\r\nexport const ReactionWorkoutContext = React.createContext({\r\n  type: 0,\r\n  area: [\"0\", \"2\"],\r\n  kind: 0,\r\n  time: 0,\r\n  repeat: 0,\r\n  setType: (type: number) => {},\r\n  setArea: (area: string[]) => {},\r\n  setKind: (kind: number) => {},\r\n  setTime: (time: number) => {},\r\n  setRepeat: (repeat: number) => {},\r\n});\r\n\r\nconst getTypeOrDefault = (typeToVerify: number) => {\r\n  return ReactionType[typeToVerify] ? typeToVerify : 0;\r\n};\r\n\r\nconst getKindOrDefault = (kindToVerify: number) => {\r\n  return ReactionKind[kindToVerify] ? kindToVerify : 0;\r\n};\r\n\r\nfunction getInitialValues(\r\n  search: string\r\n): [number, string[][], number, number, number] {\r\n  const searchParams = new URLSearchParams(search);\r\n\r\n  const type: number =\r\n    getTypeOrDefault(parseInt(searchParams.get(\"type\") || \"0\")) ||\r\n    ReactionType.NUMBER;\r\n  const numberArea: string[] = (type === 0 &&\r\n    (searchParams.get(\"area\") || \"0_2\").split(\"_\")) || [\"0\", \"2\"];\r\n  const colorArea: string[] = (type === 1 &&\r\n    (searchParams.get(\"area\") || \"blue_red\").split(\"_\")) || [\"blue\", \"red\"];\r\n  const nameArea: string[] = (type === 2 &&\r\n    (searchParams.get(\"area\") || \"left_right\").split(\"_\")) || [\"left\", \"right\"];\r\n  const directionArea: string[] = (type === 3 &&\r\n    (searchParams.get(\"area\") || \"⭠_⭢\").split(\"_\")) || [\"⭠\", \"⭢\"];\r\n  const reactionWithTime = (searchParams.get(\"kind\") || \"0\").split(\"_\");\r\n  const kind: number =\r\n    getKindOrDefault(parseInt(reactionWithTime[0])) || ReactionKind.ON_CLICK;\r\n  const time: number =\r\n    parseInt(reactionWithTime.length > 1 ? reactionWithTime[1] : \"0\") || 0;\r\n  const repeat: number = parseInt(searchParams.get(\"repeat\") || \"0\");\r\n  return [\r\n    type,\r\n    [numberArea, colorArea, nameArea, directionArea],\r\n    kind,\r\n    time,\r\n    repeat,\r\n  ];\r\n}\r\n\r\nexport const ReactionWorkoutContextProvider: React.FC = (props) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const initialValues: [number, string[][], number, number, number] = (() =>\r\n    getInitialValues(location.search))();\r\n\r\n  const [type, setType] = useState<number>(initialValues[0]);\r\n  const [areas, setAreas] = useState<string[][]>(initialValues[1]);\r\n  const [area, setArea] = useState<string[]>(areas[type]);\r\n  const [kind, setKind] = useState<number>(initialValues[2]);\r\n  const [time, setTime] = useState<number>(initialValues[3]);\r\n  const [repeat, setRepeat] = useState<number>(initialValues[4]);\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (area.join(\"_\") !== (searchParams.get(\"area\") || \"0_2\")) {\r\n      const newAreas = [...areas];\r\n      newAreas[getTypeOrDefault(type)] = area;\r\n      setAreas(newAreas);\r\n    }\r\n    if (type !== getTypeOrDefault(parseInt(searchParams.get(\"type\") || \"0\"))) {\r\n      setArea(areas[type]);\r\n    }\r\n\r\n    searchParams.set(\"type\", `${getTypeOrDefault(type)}`);\r\n    searchParams.set(\"area\", `${area.join(\"_\")}`);\r\n    searchParams.set(\r\n      \"kind\",\r\n      getKindOrDefault(kind) === 0\r\n        ? `${getKindOrDefault(kind)}`\r\n        : `${kind}_${time}`\r\n    );\r\n    searchParams.set(\"repeat\", `${repeat}`);\r\n\r\n    history.push(`?${searchParams.toString()}`);\r\n  }, [type, area, areas, kind, time, repeat, history, location.search]);\r\n\r\n  return (\r\n    <ReactionWorkoutContext.Provider\r\n      value={{\r\n        type: type,\r\n        area: area,\r\n        kind: kind,\r\n        time: time,\r\n        repeat: repeat,\r\n        setType: setType,\r\n        setArea: setArea,\r\n        setKind: setKind,\r\n        setTime: setTime,\r\n        setRepeat: setRepeat,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ReactionWorkoutContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Modal, InputGroup, Form, Button } from \"react-bootstrap\";\r\nimport { ReactionWorkoutContext } from \"../context/ReactionWorkoutContext\";\r\n\r\nconst NumberAreaModal: React.FC<{ show: boolean; hide: () => void }> = (\r\n  props\r\n) => {\r\n  const { area, setArea } = useContext(ReactionWorkoutContext);\r\n\r\n  const [areaValues, setAreaValues] = useState([...area]);\r\n  const [validRange, setValidRange] = useState(\r\n    parseInt(areaValues[0]) <= parseInt(areaValues[1])\r\n  );\r\n\r\n  return (\r\n    <Modal show={props.show} size=\"sm\" centered onHide={props.hide}>\r\n      <Modal.Header className=\"modal-head-fg\" closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Min & max Numbers\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modal-rest-fg\">\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>min</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg-dark\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"minimal number\"\r\n            isInvalid={!validRange}\r\n            value={parseInt(areaValues[0]) < 0 ? \"\" : parseInt(areaValues[0])}\r\n            onChange={(event: { currentTarget: { value: string } }) => {\r\n              if (\r\n                isNaN(parseInt(event.currentTarget.value)) ||\r\n                event.currentTarget.value.length === 0\r\n              ) {\r\n                setAreaValues([\"-1\", areaValues[1]]);\r\n              } else {\r\n                setAreaValues([\r\n                  parseInt(event.currentTarget.value).toString(),\r\n                  areaValues[1],\r\n                ]);\r\n              }\r\n            }}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            The min-number must be smaller than or equal to the max-number.\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n        <InputGroup className=\"mt-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>max</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            bsPrefix=\"form-control form-fg-dark\"\r\n            type=\"text\"\r\n            pattern=\"[0-9]*\"\r\n            placeholder=\"maximal number\"\r\n            isInvalid={!validRange}\r\n            value={parseInt(areaValues[1]) < 0 ? \"\" : parseInt(areaValues[1])}\r\n            onChange={(event: { currentTarget: { value: string } }) => {\r\n              if (\r\n                isNaN(parseInt(event.currentTarget.value)) ||\r\n                event.currentTarget.value.length === 0\r\n              ) {\r\n                setAreaValues([areaValues[0], \"-1\"]);\r\n              } else {\r\n                setAreaValues([areaValues[0], event.currentTarget.value]);\r\n              }\r\n            }}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\"></Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"modal-rest-fg\">\r\n        <Button\r\n          id=\"button-fg\"\r\n          onClick={() => {\r\n            if (parseInt(areaValues[0]) > parseInt(areaValues[1])) {\r\n              setValidRange(false);\r\n            } else {\r\n              setArea(areaValues);\r\n              props.hide();\r\n            }\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default NumberAreaModal;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Button, Modal, Row } from \"react-bootstrap\";\r\nimport { ReactionWorkoutContext } from \"../context/ReactionWorkoutContext\";\r\n\r\nconst ColorAreaModal: React.FC<{ show: boolean; hide: () => void }> = (props) => {\r\n  const { area, setArea } = useContext(ReactionWorkoutContext);\r\n\r\n  const colors: string[] = [\r\n    \"red\",\r\n    \"blue\",\r\n    \"yellow\",\r\n    \"green\",\r\n    \"orange\",\r\n    \"indigo\",\r\n    \"purple\",\r\n    \"pink\",\r\n    \"cyan\",\r\n    \"grey\",\r\n    \"white\",\r\n    \"black\",\r\n  ];\r\n\r\n  const colorIdxs: number[][] = [\r\n    [0, 1, 2, 3],\r\n    [4, 5, 6, 7],\r\n    [8, 9, 10, 11],\r\n  ];\r\n\r\n  const [selectedColors, setSelectedColors] = useState<boolean[]>(\r\n    Array(colors.length)\r\n      .fill(false)\r\n      .map((v, i) => area.indexOf(colors[i]) >= 0)\r\n  );\r\n\r\n  const setSeledctedColor = (colorIdx: number) => {\r\n    const newSelectedColors = [...selectedColors];\r\n    newSelectedColors[colorIdx] = !newSelectedColors[colorIdx];\r\n    setSelectedColors(newSelectedColors);\r\n  };\r\n\r\n  const ColorPalette: React.FC<{ setSeledctedColor: Function }> = (props) => {\r\n    return (\r\n      <>\r\n        {colorIdxs.map((colorIdxRow, i) => (\r\n          <Row className=\"justify-content-center\" key={i}>\r\n            {colorIdxRow.map((colorIdx) => (\r\n              <span \r\n                key={colorIdx}\r\n                role=\"button\" \r\n                id=\"select-color\"\r\n                className=\"mt-2 ml-1 mr-1\"\r\n                style={{ backgroundColor: colors[colorIdx] }}\r\n                onClick={() => props.setSeledctedColor(colorIdx)}\r\n              >\r\n                <input\r\n                  id=\"select-color-check\"\r\n                  type=\"checkbox\"\r\n                  key={colorIdx+\"check\"}\r\n                  checked={selectedColors[colorIdx]}\r\n                  readOnly\r\n                />\r\n              </span>\r\n            ))}\r\n          </Row>\r\n        ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal show={props.show} size=\"sm\" centered onHide={props.hide}>\r\n      <Modal.Header className=\"modal-head-fg\" closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">Colors</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modal-rest-fg\">\r\n        <ColorPalette setSeledctedColor={setSeledctedColor} />\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"modal-rest-fg\">\r\n        <Button\r\n          id=\"button-fg\"\r\n          onClick={() => {\r\n            setArea(colors.filter((v, i) => selectedColors[i]));\r\n            props.hide();\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ColorAreaModal;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Modal, InputGroup, Form, Button } from \"react-bootstrap\";\r\nimport { ReactionWorkoutContext } from \"../context/ReactionWorkoutContext\";\r\n\r\nconst NameAreaModal: React.FC<{ show: boolean, hide: () => void }> = props => {\r\n    const {\r\n        area,\r\n        setArea,\r\n      } = useContext(ReactionWorkoutContext);\r\n\r\n    const [areaValues, setAreaValues] = useState([...area]);\r\n    const [newValue, setNewValue] = useState(\"\");\r\n\r\n    const changeAreaValuesAtIndex = (idx: number, val: string) => {\r\n      const newAreaValues = [...areaValues];\r\n      newAreaValues[idx] = val;\r\n      setAreaValues(newAreaValues);\r\n    }\r\n\r\n    const deleteAreaValuesAtIndex = (idx: number) => {\r\n      const newAreaValues = [...areaValues].filter((v, i) => i !== idx);\r\n      setAreaValues(newAreaValues);\r\n    }\r\n\r\n    const NameItem: React.FC<{name: string, idx: number}> = props => {\r\n      const [currentName, setCurrentName] = useState(props.name);\r\n      return (\r\n        <InputGroup>\r\n      <Form.Control\r\n            bsPrefix=\"form-control form-fg-dark\"\r\n            type=\"text\"\r\n            placeholder=\"new name\"\r\n            value={currentName}\r\n            onChange={(event: { currentTarget: { value: string } }) => setCurrentName(event.currentTarget.value)}\r\n          />\r\n          <InputGroup.Prepend >\r\n          <span role=\"button\" aria-label=\"checkmark\" onClick={() => changeAreaValuesAtIndex(props.idx, currentName)}>✔</span>\r\n          <span role=\"button\" aria-label=\"delete\" onClick={() => deleteAreaValuesAtIndex(props.idx)}>✖</span>\r\n          </InputGroup.Prepend>\r\n      </InputGroup>)\r\n    };\r\n\r\n    return (\r\n      <Modal\r\n        show={props.show}\r\n        size=\"sm\"\r\n        centered\r\n        onHide={props.hide}\r\n      >\r\n        <Modal.Header className=\"modal-head-fg\" closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Names\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"modal-rest-fg\">\r\n          {areaValues.map((name, i) => <NameItem name={name} idx={i} key={i}/>)}\r\n\r\n          <InputGroup className=\"mt-3\">\r\n            <Form.Control\r\n              bsPrefix=\"form-control form-fg-dark\"\r\n              type=\"text\"\r\n              placeholder=\"new name\"\r\n              value={newValue}\r\n              onChange={(event: { currentTarget: { value: string } }) => setNewValue(event.currentTarget.value)}\r\n            />\r\n            <InputGroup.Prepend onClick={() => {\r\n              if (newValue !== \"\") {\r\n                setAreaValues([...areaValues, newValue]);\r\n                setNewValue(\"\");\r\n              }\r\n            }}>\r\n            <span role=\"button\" aria-label=\"checkmark\">✔</span>\r\n            </InputGroup.Prepend>\r\n          </InputGroup>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"modal-rest-fg\">\r\n          <Button\r\n            id=\"button-fg\"\r\n            onClick={() => {\r\n                    setArea(areaValues);\r\n                    props.hide();\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  export default NameAreaModal;","import React, { useState, useContext } from \"react\";\r\nimport { Modal, Button, Row } from \"react-bootstrap\";\r\nimport { ReactionWorkoutContext } from \"../context/ReactionWorkoutContext\";\r\n\r\nexport const directions: string[] = [\r\n  \"⬉⬉\",\r\n  \"\",\r\n  \"⭡⭡\",\r\n  \"\",\r\n  \"⬈⬈\",\r\n  \"\",\r\n  \"⬉\",\r\n  \"⭡\",\r\n  \"⬈\",\r\n  \"\",\r\n  \"⇇\",\r\n  \"⭠\",\r\n  \"\",\r\n  \"⭢\",\r\n  \"⇉\",\r\n  \"\",\r\n  \"⬋\",\r\n  \"⭣\",\r\n  \"⬊\",\r\n  \"\",\r\n  \"⬋⬋\",\r\n  \"\",\r\n  \"⭣⭣\",\r\n  \"\",\r\n  \"⬊⬊\",\r\n];\r\n\r\nexport const directionIdxs: number[][] = [\r\n  [0, 1, 2, 3, 4],\r\n  [5, 6, 7, 8, 9],\r\n  [10, 11, 12, 13, 14],\r\n  [15, 16, 17, 18, 19],\r\n  [20, 21, 22, 23, 24],\r\n];\r\n\r\nconst DirectionAreaModal: React.FC<{ show: boolean; hide: () => void }> = (\r\n  props\r\n) => {\r\n  const { area, setArea } = useContext(ReactionWorkoutContext);\r\n  const [selectedDirections, setSelectedDirections] = useState<boolean[]>(\r\n    Array(directions.length)\r\n      .fill(false)\r\n      .map((v, i) => area.indexOf(directions[i]) >= 0)\r\n  );\r\n\r\n  const setSelectedDirection = (directionIdx: number) => {\r\n    if (directions[directionIdx] !== \"\") {\r\n      const newSelectedDirection = [...selectedDirections];\r\n      newSelectedDirection[directionIdx] = !newSelectedDirection[directionIdx];\r\n      setSelectedDirections(newSelectedDirection);\r\n    }\r\n  };\r\n\r\n  const DirectionPalette: React.FC<{ setSelectedDirection: Function }> = (\r\n    props\r\n  ) => {\r\n    return (\r\n      <>\r\n        {directionIdxs.map((directionIdxRow, i) => (\r\n          <Row className=\"justify-content-center\" key={i}>\r\n            {directionIdxRow.map((directionIdx) => (\r\n              <span\r\n                key={directionIdx}\r\n                role={directions[directionIdx] !== \"\" ? \"button\" : \"text\"}\r\n                id={\r\n                  selectedDirections[directionIdx]\r\n                    ? \"span-direction-selected\"\r\n                    : \"span-direction\"\r\n                }\r\n                className=\"span-direction span-direction-arrow span-direction-hover\"\r\n                onClick={() => setSelectedDirection(directionIdx)}\r\n              >\r\n                {directions[directionIdx]}\r\n              </span>\r\n            ))}\r\n          </Row>\r\n        ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal show={props.show} size=\"sm\" centered onHide={props.hide}>\r\n      <Modal.Header className=\"modal-head-fg\" closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">Directions</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modal-rest-fg\">\r\n        <DirectionPalette setSelectedDirection={setSelectedDirection} />\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"modal-rest-fg\">\r\n        <Button\r\n          id=\"button-fg\"\r\n          onClick={() => {\r\n            setArea(directions.filter((v, i) => selectedDirections[i]));\r\n            props.hide();\r\n          }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DirectionAreaModal;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Container, InputGroup, Form, Button, Row } from \"react-bootstrap\";\r\nimport {\r\n  ReactionKind,\r\n  ReactionWorkoutContext,\r\n} from \"../context/ReactionWorkoutContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport NumberAreaModal from \"../reaction_type/ReactionTypeNumberAreaDisplay\";\r\nimport { ReactionType } from \"../reaction_type/ReactionTypeEnum\";\r\nimport ColorAreaModal from \"../reaction_type/ReactionTypeColorAreaDisplay\";\r\nimport NameAreaModal from \"../reaction_type/ReactionTypeNameAreaDisplay\";\r\nimport DirectionAreaModal from \"../reaction_type/ReactionTypeDirectionAreaDisplay\";\r\n\r\nconst SettingsPage: React.FC = () => {\r\n  const {\r\n    type,\r\n    area,\r\n    kind,\r\n    time,\r\n    repeat,\r\n    setType,\r\n    setKind,\r\n    setTime,\r\n    setRepeat,\r\n  } = useContext(ReactionWorkoutContext);\r\n\r\n  const history = useHistory();\r\n\r\n  const [validate, setValidate] = useState(false);\r\n\r\n  const [showNumberAreaModal, setShowNumberAreaModal] = useState(false);\r\n  const [showColorAreaModal, setShowColorAreaModal] = useState(false);\r\n  const [showNameAreaModal, setShowNameAreaModal] = useState(false);\r\n  const [showDirectionAreaModal, setShowDirectionAreaModal] = useState(false);\r\n\r\n  const showModal = () => {\r\n    switch (type) {\r\n      case ReactionType.NUMBER:\r\n        setShowNumberAreaModal(true);\r\n        break;\r\n      case ReactionType.COLOR:\r\n        setShowColorAreaModal(true);\r\n        break;\r\n      case ReactionType.NAME:\r\n        setShowNameAreaModal(true);\r\n        break;\r\n      case ReactionType.DIRECTION:\r\n        setShowDirectionAreaModal(true);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container style={{ maxWidth: \"30rem\" }}>\r\n      {showNumberAreaModal && (\r\n        <NumberAreaModal\r\n          show={showNumberAreaModal}\r\n          hide={() => setShowNumberAreaModal(false)}\r\n        />\r\n      )}\r\n      {showColorAreaModal && (\r\n        <ColorAreaModal\r\n          show={showColorAreaModal}\r\n          hide={() => setShowColorAreaModal(false)}\r\n        />\r\n      )}\r\n      {showNameAreaModal && (\r\n        <NameAreaModal\r\n          show={showNameAreaModal}\r\n          hide={() => setShowNameAreaModal(false)}\r\n        />\r\n      )}\r\n      {showDirectionAreaModal && (\r\n        <DirectionAreaModal\r\n          show={showDirectionAreaModal}\r\n          hide={() => setShowDirectionAreaModal(false)}\r\n        />\r\n      )}\r\n      <Form>\r\n        <Form.Group controlId=\"formType\" className=\"mt-3 ml-3 mr-3\">\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Type</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              bsPrefix=\"form-control form-fg\"\r\n              as=\"select\"\r\n              value={type}\r\n              onChange={(event: { currentTarget: { value: string } }) =>\r\n                setType(parseInt(event.currentTarget.value))\r\n              }\r\n            >\r\n              <option value={0}>Numbers</option>\r\n              <option value={1}>Colors</option>\r\n              <option value={2}>Names</option>\r\n              <option value={3}>Directions</option>\r\n            </Form.Control>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formArea\" className=\"mt-3 ml-3 mr-3\">\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Area</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Button bsPrefix=\"form-control form-fg\" onClick={showModal}>\r\n              {area.length === 0 ? \"click to select\" : area.join(\", \")}\r\n            </Button>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formKind\" className=\"mt-3 ml-3 mr-3\">\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Kind</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              bsPrefix=\"form-control form-fg\"\r\n              as=\"select\"\r\n              value={kind}\r\n              onChange={(event: { currentTarget: { value: string } }) =>\r\n                setKind(parseInt(event.currentTarget.value))\r\n              }\r\n            >\r\n              <option value={0}>on Click</option>\r\n              <option value={1}>time</option>\r\n            </Form.Control>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        {kind === ReactionKind.TIME && (\r\n          <Form.Group controlId=\"formTime\" className=\"mt-3 ml-3 mr-3\">\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Time</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                bsPrefix=\"form-control form-fg\"\r\n                type=\"text\"\r\n                pattern=\"[0-9]*\"\r\n                placeholder=\"change after sec\"\r\n                value={time <= 0 ? \"\" : time}\r\n                isInvalid={validate && time <= 0}\r\n                onChange={(event: { currentTarget: { value: string } }) => {\r\n                  if (\r\n                    isNaN(parseInt(event.currentTarget.value)) ||\r\n                    event.currentTarget.value.length === 0\r\n                  ) {\r\n                    setTime(0);\r\n                  } else {\r\n                    setTime(parseInt(event.currentTarget.value));\r\n                  }\r\n                }}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\" tooltip>\r\n                The time must be greater than <b>0</b> sec.\r\n              </Form.Control.Feedback>\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>sec</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Form.Group>\r\n        )}\r\n        {type === ReactionType.NUMBER && (\r\n          <Form.Group\r\n            controlId=\"formRepeatElement\"\r\n            className=\"mt-4 ml-3 mr-3 mb-4\"\r\n            defaultChecked={repeat === 0}\r\n          >\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              label=\"Repeat Elements\"\r\n              checked={repeat === 0}\r\n              onChange={(event: { currentTarget: { checked: boolean } }) => {\r\n                setRepeat(event.currentTarget.checked ? 0 : 1);\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        )}\r\n        {type !== ReactionType.NUMBER && (\r\n          <Form.Group\r\n            as={Row}\r\n            controlId=\"formRepeatElement\"\r\n            className=\"ml-3 mr-3\"\r\n          >\r\n            <Form.Label className=\"mt-2\">Repeat</Form.Label>\r\n            <Form.Control\r\n              className=\"ml-1 mr-1\"\r\n              bsPrefix=\"form-fg-width form-control form-fg-dark\"\r\n              type=\"number\"\r\n              pattern=\"[0-9]*\"\r\n              min=\"0\"\r\n              max=\"10\"\r\n              value={repeat === 0 ? \"\" : repeat}\r\n              onChange={(event: { currentTarget: { value: string } }) => {\r\n                setRepeat(parseInt(event.currentTarget.value));\r\n              }}\r\n            />\r\n            <Form.Label className=\"mt-2\">\r\n              {repeat === 0 ? \"infinitely\" : repeat === 1 ? \"time\" : \"times\"}\r\n            </Form.Label>\r\n          </Form.Group>\r\n        )}\r\n        <Form.Row className=\"justify-content-center\">\r\n          <Button\r\n            id=\"button-fg\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              if (kind === 0 || time > 0) {\r\n                history.push(\"/workout\" + history.location.search);\r\n              } else {\r\n                setValidate(true);\r\n              }\r\n            }}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Form.Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;\r\n","import React, { useContext } from \"react\";\r\nimport { ReactionWorkoutContext, ReactionKind } from \"../context/ReactionWorkoutContext\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport interface ReactionButtonProps {\r\n    runTimeBasedReaction: boolean;\r\n    setRunTimeBasedReaction: Function;\r\n    setNeedNewRandomValue: Function;\r\n};\r\n\r\nconst ReactionButton: React.FC<ReactionButtonProps> = props => {\r\n    const { kind } = useContext(ReactionWorkoutContext);\r\n    const { runTimeBasedReaction, setRunTimeBasedReaction, setNeedNewRandomValue } = props;\r\n    return (\r\n      <>\r\n        {kind === ReactionKind.TIME && (\r\n          <Button\r\n            id=\"button-fg\"\r\n            className=\"button-big-circle-centered\"\r\n            onClick={() => {\r\n              setRunTimeBasedReaction(!runTimeBasedReaction);\r\n            }}\r\n          >\r\n            {runTimeBasedReaction ? \"Stop\" : \"Start\"}\r\n          </Button>\r\n        )}\r\n        {kind === ReactionKind.ON_CLICK && (\r\n          <Button\r\n            id=\"button-fg\"\r\n            className=\"button-big-circle-centered\"\r\n            onClick={() => setNeedNewRandomValue(true)}\r\n          >\r\n            click\r\n          </Button>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default ReactionButton;","import React from \"react\";\r\nimport useWindowSize from \"react-use/lib/useWindowSize\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ReactionButton, { ReactionButtonProps } from \"./ReactionButton\";\r\n\r\ninterface TextWorkoutDisplayProps {\r\n  randomValue: string;\r\n  reactionButtonProps: ReactionButtonProps;\r\n}\r\n\r\nconst TextWorkoutDisplay: React.FC<TextWorkoutDisplayProps> = (props) => {\r\n  const {\r\n    randomValue,\r\n    reactionButtonProps,\r\n  } = props;\r\n  const {\r\n    runTimeBasedReaction,\r\n    setRunTimeBasedReaction,\r\n    setNeedNewRandomValue,\r\n  } = reactionButtonProps;\r\n  const { width, height } = useWindowSize();\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        style={{\r\n          width: width,\r\n          height: height / 2,\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          fontSize: \"5rem\",\r\n        }}\r\n      >\r\n        {randomValue}\r\n      </Container>\r\n      <Container\r\n        style={{\r\n          width: width,\r\n          height: height / 2 - 56,\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <ReactionButton\r\n          runTimeBasedReaction={runTimeBasedReaction}\r\n          setRunTimeBasedReaction={setRunTimeBasedReaction}\r\n          setNeedNewRandomValue={setNeedNewRandomValue}\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextWorkoutDisplay;\r\n","import React from \"react\";\r\nimport useWindowSize from \"react-use/lib/useWindowSize\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ReactionButton, { ReactionButtonProps } from \"./ReactionButton\";\r\n\r\ninterface ColorWorkoutDisplayProps {\r\n  randomValue: string;\r\n  defaultBackground: string;\r\n  reactionButtonProps: ReactionButtonProps;\r\n}\r\n\r\nconst ColorWorkoutDisplay: React.FC<ColorWorkoutDisplayProps> = (props) => {\r\n  const {\r\n    randomValue,\r\n    defaultBackground,\r\n    reactionButtonProps,\r\n  } = props;\r\n  const {\r\n    runTimeBasedReaction,\r\n    setRunTimeBasedReaction,\r\n    setNeedNewRandomValue,\r\n  } = reactionButtonProps;\r\n  const { width, height } = useWindowSize();\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        style={{\r\n          width: width,\r\n          height: height / 2,\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: randomValue,\r\n        }}\r\n      />\r\n      <Container\r\n        style={{\r\n          width: width,\r\n          height: height / 2 - 56,\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          backgroundColor: randomValue === \"\" ? defaultBackground : randomValue,\r\n        }}\r\n      >\r\n        <ReactionButton\r\n          runTimeBasedReaction={runTimeBasedReaction}\r\n          setRunTimeBasedReaction={setRunTimeBasedReaction}\r\n          setNeedNewRandomValue={setNeedNewRandomValue}\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColorWorkoutDisplay;\r\n","import React, { useContext } from \"react\";\r\nimport useWindowSize from \"react-use/lib/useWindowSize\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport { directionIdxs, directions } from \"./ReactionTypeDirectionAreaDisplay\";\r\nimport ReactionButton, { ReactionButtonProps } from \"./ReactionButton\";\r\nimport {\r\n  ReactionWorkoutContext,\r\n  ReactionKind,\r\n} from \"../context/ReactionWorkoutContext\";\r\n\r\ninterface DirectionWorkoutDisplayProps {\r\n  randomValue: string;\r\n  areaPool: string[];\r\n  reactionButtonProps: ReactionButtonProps;\r\n}\r\n\r\nconst DirectionWorkoutDisplay: React.FC<DirectionWorkoutDisplayProps> = (\r\n  props\r\n) => {\r\n  const { randomValue, areaPool, reactionButtonProps } = props;\r\n  const {\r\n    runTimeBasedReaction,\r\n    setRunTimeBasedReaction,\r\n    setNeedNewRandomValue,\r\n  } = reactionButtonProps;\r\n  const { width, height } = useWindowSize();\r\n  const { area, kind } = useContext(ReactionWorkoutContext);\r\n\r\n  const blink = (directionIdx: number) => {\r\n    if (randomValue === \"\") {\r\n      return false;\r\n    } else if (kind === ReactionKind.TIME && !runTimeBasedReaction) {\r\n      return false;\r\n    } else if (directions[directionIdx] !== randomValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        width: width,\r\n        maxWidth: \"30rem\",\r\n        height: height - 56,\r\n      }}\r\n    >\r\n      {directionIdxs.map((directionIdxRow, i) => (\r\n        <Row className=\"justify-content-center\" key={i}>\r\n          {directionIdxRow.map((directionIdx) => (\r\n            <span\r\n              key={directionIdx}\r\n              id={\r\n                (areaPool.indexOf(directions[directionIdx]) >= 0) || (area.indexOf(directions[directionIdx]) >= 0 && blink(directionIdx))\r\n                ? \"span-direction-selected\"\r\n                :\"span-direction\"\r\n                \r\n              }\r\n              className={\r\n                directionIdx === 12\r\n                  ? \"span-direction span-direction-button\"\r\n                  : blink(directionIdx)\r\n                  ? \"span-direction span-direction-arrow blink-direction\"\r\n                  : \"span-direction span-direction-arrow\"\r\n              }\r\n            >\r\n              {directionIdx === 12 && (\r\n                <ReactionButton\r\n                  runTimeBasedReaction={runTimeBasedReaction}\r\n                  setRunTimeBasedReaction={setRunTimeBasedReaction}\r\n                  setNeedNewRandomValue={setNeedNewRandomValue}\r\n                />\r\n              )}\r\n              {directions[directionIdx]}\r\n            </span>\r\n          ))}\r\n        </Row>\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DirectionWorkoutDisplay;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { ReactionWorkoutContext } from \"../context/ReactionWorkoutContext\";\r\nimport { ReactionType } from \"../reaction_type/ReactionTypeEnum\";\r\nimport TextWorkoutDisplay from \"../reaction_type/TextWorkoutDisplay\";\r\nimport ColorWorkoutDisplay from \"../reaction_type/ColorWorkoutDisplay\";\r\nimport DirectionWorkoutDisplay from \"../reaction_type/DirectionWorkoutDisplay\";\r\n\r\nconst WorkoutPage: React.FC = () => {\r\n  const { type, area, time, repeat } = useContext(ReactionWorkoutContext);\r\n  const [randomValueIdx, setRandomValueIdx] = useState<number>(-1);\r\n  const [randomValue, setRandomValue] = useState<string>(\"\");\r\n  const [needNewRandomValue, setNeedNewRandomValue] = useState<boolean>(false);\r\n  const [poolUpdated, setPoolUpdated] = useState<boolean>(true);\r\n  const [runTimeBasedReaction, setRunTimeBasedReaction] = useState<boolean>(\r\n    false\r\n  );\r\n  const [done, setDone] = useState<boolean>(false);\r\n  const [areaPool, setAreaPool] = useState<string[]>([]);\r\n  const defaultBackground: string = \"white\";\r\n  const [timer, setTimer] = useState(setTimeout(() => {}, 0));\r\n  const [startTimer, setStartTimer] = useState<boolean>(false);\r\n  const unsetRV = () => {\r\n    setRandomValueIdx(-1);\r\n    setRandomValue(\"\");\r\n  };\r\n\r\n  /**\r\n   * Effect to generate new random value or set done\r\n   */\r\n  useEffect(() => {\r\n    if (needNewRandomValue && areaPool.length > 0) {\r\n      setNeedNewRandomValue(false);\r\n      Promise.resolve(unsetRV()).then(() =>\r\n        setTimeout(() => {\r\n          const rvIdx = Math.floor(Math.random() * areaPool.length);\r\n          setRandomValueIdx(rvIdx);\r\n          setRandomValue(areaPool[rvIdx]);\r\n          setPoolUpdated(false);\r\n        }, 200)\r\n      );\r\n    } else if (needNewRandomValue && areaPool.length === 0) {\r\n      setNeedNewRandomValue(false);\r\n      setRunTimeBasedReaction(false);\r\n      setDone(true);\r\n    }\r\n  }, [needNewRandomValue, areaPool]);\r\n\r\n  useEffect(() => {\r\n    if (randomValueIdx === -1) {\r\n      setStartTimer(false);\r\n    } else {\r\n      setStartTimer(true);\r\n    }\r\n  }, [randomValueIdx]);\r\n\r\n  /**\r\n   * Effect to start sleep for given amount of time\r\n   */\r\n  useEffect(() => {\r\n    if (startTimer && runTimeBasedReaction) {\r\n      setTimer(\r\n        setTimeout(() => {\r\n          setNeedNewRandomValue(true);\r\n        }, time * 1000)\r\n      );\r\n    }\r\n  }, [startTimer, time, runTimeBasedReaction]);\r\n\r\n  /**\r\n   * Effect to start random value generation for time based reaction\r\n   */\r\n  useEffect(() => {\r\n    if (runTimeBasedReaction) {\r\n      setNeedNewRandomValue(true);\r\n    }\r\n  }, [runTimeBasedReaction]);\r\n\r\n  /**\r\n   * Effect to clear timer\r\n   */\r\n  useEffect(() => {\r\n    if (!runTimeBasedReaction) {\r\n      clearTimeout(timer);\r\n      setStartTimer(false);\r\n    }\r\n  }, [runTimeBasedReaction, timer]);\r\n\r\n  /**\r\n   * Effect to clear random value when done and initialize area pool when done changes to false\r\n   */\r\n  useEffect(() => {\r\n    const initializeAreaPool = () => {\r\n      switch (type) {\r\n        case ReactionType.NUMBER:\r\n          const min = parseInt(area[0]);\r\n          const max = parseInt(area[1]);\r\n          const range = max - min + 1;\r\n          return Array(range)\r\n            .fill(0)\r\n            .map((v, i) => `${i + min}`);\r\n        default:\r\n          let localAreaPool = [...area];\r\n          for (let index = 1; index < repeat; index++) {\r\n            localAreaPool = localAreaPool.concat([...area]);\r\n          }\r\n          return localAreaPool;\r\n      }\r\n    };\r\n    if (done) {\r\n      unsetRV();\r\n    } else {\r\n      setAreaPool(initializeAreaPool());\r\n    }\r\n  }, [done, type, area, repeat]);\r\n\r\n  /**\r\n   * Effect to update valid values when they are not allowed to be repeated\r\n   */\r\n  useEffect(() => {\r\n    if (repeat !== 0 && !poolUpdated && randomValueIdx >= 0) {\r\n      Promise.resolve(setPoolUpdated(true)).then(() =>\r\n        setTimeout(() => {\r\n          const modAreaPool = areaPool.filter((v, i) => i !== randomValueIdx);\r\n          setAreaPool(modAreaPool);\r\n        }, 200)\r\n      );\r\n    }\r\n  }, [randomValueIdx, areaPool, repeat, poolUpdated]);\r\n\r\n  const DoneModal: React.FC = () => {\r\n    return (\r\n      <Modal\r\n        show={done}\r\n        size=\"sm\"\r\n        centered\r\n        onHide={() => {\r\n          setDone(false);\r\n        }}\r\n      >\r\n        <Modal.Header className=\"modal-head-fg\" closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">Done</Modal.Title>\r\n        </Modal.Header>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DoneModal />\r\n      {(type === ReactionType.NUMBER || type === ReactionType.NAME) && (\r\n        <TextWorkoutDisplay\r\n          randomValue={randomValue}\r\n          reactionButtonProps={{\r\n            runTimeBasedReaction,\r\n            setRunTimeBasedReaction,\r\n            setNeedNewRandomValue,\r\n          }}\r\n        />\r\n      )}\r\n      {type === ReactionType.COLOR && (\r\n        <ColorWorkoutDisplay\r\n          randomValue={randomValue}\r\n          defaultBackground={defaultBackground}\r\n          reactionButtonProps={{\r\n            runTimeBasedReaction,\r\n            setRunTimeBasedReaction,\r\n            setNeedNewRandomValue,\r\n          }}\r\n        />\r\n      )}\r\n      {type === ReactionType.DIRECTION && (\r\n        <DirectionWorkoutDisplay\r\n          randomValue={randomValue}\r\n          areaPool={areaPool}\r\n          reactionButtonProps={{\r\n            runTimeBasedReaction,\r\n            setRunTimeBasedReaction,\r\n            setNeedNewRandomValue,\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WorkoutPage;\r\n","import React, { useContext } from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport logo from \"./logo.svg\";\nimport \"./ReactionWorkoutApp.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport SettingsPage from \"./settings/SettingsPage\";\nimport WorkoutPage from \"./workout/WorkoutPage\";\nimport {\n  ReactionKind,\n  ReactionWorkoutContext,\n} from \"./context/ReactionWorkoutContext\";\n\nfunction ReactionWorkoutApp() {\n  const { kind, time } = useContext(ReactionWorkoutContext);\n  return (\n    <>\n      <header>\n        <Navbar bg=\"fg\" variant=\"dark\" expand=\"sm\" collapseOnSelect>\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"30\"\n              height=\"30\"\n              className=\"spin-logo d-inline-block align-top\"\n            />\n            &nbsp;&nbsp;ReactionWorkout\n          </Navbar.Brand>\n          <Navbar.Toggle />\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Nav>\n              <Nav.Item>\n                <LinkContainer\n                  activeClassName=\"active\"\n                  exact={true}\n                  to=\"/settings\"\n                >\n                  <Nav.Link>{\"Settings\"}</Nav.Link>\n                </LinkContainer>\n              </Nav.Item>\n              <Nav.Item>\n                <LinkContainer\n                  activeClassName=\"active\"\n                  exact={true}\n                  to=\"/workout\"\n                >\n                  {kind === ReactionKind.TIME && time === 0 ? (\n                    <Nav.Link disabled>{\"Workout\"}</Nav.Link>\n                  ) : (\n                    <Nav.Link>{\"Workout\"}</Nav.Link>\n                  )}\n                </LinkContainer>\n              </Nav.Item>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </header>\n      <main>\n        <Switch>\n          <Route path=\"/settings\" exact={true}>\n            <SettingsPage />\n          </Route>\n          <Route path=\"/workout\" exact={true}>\n            <WorkoutPage />\n          </Route>\n          <Route>\n            <Redirect from=\"/\" to=\"/settings\" />\n          </Route>\n        </Switch>\n      </main>\n    </>\n  );\n}\n\nexport default ReactionWorkoutApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactionWorkoutApp from \"./ReactionWorkoutApp\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"typeface-roboto\";\nimport \"./index.css\";\nimport { ReactionWorkoutContextProvider } from \"./context/ReactionWorkoutContext\";\n\nconst mount = document.getElementById(\"root\");\n\nconst app = (\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <ReactionWorkoutContextProvider>\n        <ReactionWorkoutApp />\n      </ReactionWorkoutContextProvider>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\nReactDOM.render(app, mount);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}